1.firefox不能对innerText支持。
firefox支持innerHTML但却不支持innerText，它支持textContent来实现innerText，不过默认把多余的空格也保留了。如果不用textContent，如果字符串里面不包含HTML代码也可以用innerHTML代替。
2.禁止选取网页内容：
在IE中一般用js：obj.onselectstart=function(){return false;}
而firefox用CSS:-moz-user-select:none
3.滤镜的支持(例：透明滤镜)：
IE:filter：alpha(opacity=10);
firefox：-moz-opacity:.10;
4.捕获事件：
IE：obj.setCapture() 、obj.releaseCapture()
Firefox： document.addEventListener("mousemove",mousemovefunction,true);
　　　　document.removeEventListener("mousemove",mousemovefunction,true);
5.获取鼠标位置：
IE:event.clientX、event.clientY
firefox：需要事件函数传递事件对象
　　　　obj.onmousemove=function(ev){
      X= ev.pageX;Y=ev.pageY;
　　　　}
6.DIV等元素的边界问题：
比如：设置一个div的CSS:：{width:100px;height:100px;border:#000000 1px solid;}
IE中：div的宽度（包括边框宽度）：100px，div的高度（包括边框宽度）：100px；
而firefox：div的宽度（包括边框宽度）：102px，div的高度（包括边框宽度）：102px；
所以在做这个兼容IE和firefox的拖动窗口时，在js和css的写法上要动点脑筋，给大家两个小技巧
一.判断浏览器类型：
var isIE=document.all? true:false;
我写了一个变量，如果支持document.all语法那么isIE=true，否则isIE=false
二.在不同浏览器下的CSS处理：
一般可以用!important来优先使用css语句（仅firefox支持）
比如：{border-width:0px!important;border-width:1px;}
在firefox下这个元素是没有边框的，在IE下边框宽度是1px
      1.document.formName.item("itemName") 问题
　　问题说明：IE下，可以使用 document.formName.item("itemName") 或 document.formName.elements ["elementName"]；Firefox下，只能使用document.formName.elements["elementName"]。
　　解决方法：统一使用document.formName.elements["elementName"]。
2.集合类对象问题
　　问题说明：IE下，可以使用 () 或 [] 获取集合类对象；Firefox下，只能使用 [ ]获取集合类对象。
　　解决方法：统一使用 [] 获取集合类对象。
3.自定义属性问题
　　问题说明：IE下，可以使用获取常规属性的方法来获取自定义属性，也可以使用 getAttribute() 获取自定义属性；Firefox下，只能使用 getAttribute() 获取自定义属性。
　　解决方法：统一通过 getAttribute() 获取自定义属性。
4.eval("idName")问题
　　问题说明：IE下，可以使用 eval("idName") 或 getElementById("idName") 来取得 id 为 idName 的HTML对象；Firefox下，只能使用 getElementById("idName") 来取得 id 为 idName 的HTML对象。
　　解决方法：统一用 getElementById("idName") 来取得 id 为 idName 的HTML对象。
5.变量名与某HTML对象ID相同的问题
　　问题说明：IE下，HTML对象的ID可以作为 document 的下属对象变量名直接使用，Firefox下则不能；Firefox下，可以使用与HTML对象ID相同的变量名，IE下则不能。
　　解决方法：使用 document.getElementById("idName") 代替 document.idName。最好不要取HTML对象ID相同的变量名，以减少错误；在声明变量时，一律加上var关键字，以避免歧义。
6.const问题
　　问题说明：Firefox下，可以使用const关键字或var关键字来定义常量；IE下，只能使用var关键字来定义常量。
　　解决方法：统一使用var关键字来定义常量。
7.input.type属性问题
　　问题说明：IE下 input.type 属性为只读；但是Firefox下 input.type 属性为读写。
       解决办法：不修改 input.type 属性。如果必须要修改，可以先隐藏原来的input，然后在同样的位置再插入一个新的input元素。
8.window.event问题
　　问题说明：window.event 只能在IE下运行，而不能在Firefox下运行，这是因为Firefox的event只能在事件发生的现场使用。
　　解决方法：在事件发生的函数上加上event参数，在函数体内(假设形参为evt)使用 var myEvent = evt?evt:(window.event?window.event:null)
       示例：<input type="button" onclick="doSomething(event)"/> 
　　<script language="javascript"> 
　　function doSomething(evt) { 
　　var myEvent = evt?evt:(window.event?window.event:null)
　　... 
　　}
       9.event.x与event.y问题
　　问题说明：IE下，even对象有x、y属性，但是没有pageX、pageY属性；Firefox下，even对象有pageX、pageY属性，但是没有x、y属性。
解决方法：var myX = event.x ? event.x : event.pageX; var myY = event.y ? event.y:event.pageY;
       如果考虑第8条问题，就改用myEvent代替event即可。
10.event.srcElement问题
　　问题说明：IE下，even对象有srcElement属性，但是没有target属性；Firefox下，even对象有target属性，但是没有srcElement属性。
　　解决方法：使用srcObj = event.srcElement ? event.srcElement : event.target;
       如果考虑第8条问题，就改用myEvent代替event即可。
11.window.location.href问题
　　问题说明：IE或者Firefox2.0.x下，可以使用window.location或window.location.href；Firefox1.5.x下，只能使用window.location。
　　解决方法：使用 window.location 来代替 window.location.href。当然也可以考虑使用 location.replace()方法。
12.模态和非模态窗口问题
　　问题说明：IE下，可以通过showModalDialog和showModelessDialog打开模态和非模态窗口；Firefox下则不能。
　　解决方法：直接使用 window.open(pageURL,name,parameters) 方式打开新窗口。 
       如果需要将子窗口中的参数传递回父窗口，可以在子窗口中使用window.opener来访问父窗口。如果需要父窗口控制子窗口的话，使用var subWindow = window.open(pageURL,name,parameters); 来获得新开的窗口对象。
13.frame和iframe问题
　　以下面的frame为例： 
　　<frame src="xxx.html" id="frameId" name="frameName" /> 
　　(1)访问frame对象
　　IE：使用window.frameId或者window.frameName来访问这个frame对象；
　　Firefox：使用window.frameName来访问这个frame对象；
       解决方法：统一使用 window.document.getElementById("frameId") 来访问这个frame对象；
　　(2)切换frame内容
　　在IE和Firefox中都可以使用window.document.getElementById("frameId").src = "xxx.html"或window.frameName.location = "xxx.html"来切换frame的内容；
　　如果需要将frame中的参数传回父窗口，可以在frame中使用parent关键字来访问父窗口。
14.body载入问题
　　问题说明：Firefox的body对象在body标签没有被浏览器完全读入之前就存在；而IE的body对象则必须在body标签被浏览器完全读入之后才存在。
       [注] 这个问题尚未实际验证，待验证后再来修改。
       [注] 经验证，IE6、Opera9以及FireFox2中不存在上述问题，单纯的JS脚本可以访问在脚本之前已经载入的所有对象和元素，即使这个元素还没有载入完成。
15. 事件委托方法
　　问题说明：IE下，使用 document.body.onload = inject; 其中function inject()在这之前已被实现；在Firefox下，使用 document.body.onload = inject();
　　解决方法：统一使用 document.body.onload=new Function('inject()'); 或者 document.body.onload = function(){/* 这里是代码 */}
       [注意] Function和function的区别
16.访问的父元素的区别
　　问题说明：在IE下，使用 obj.parentElement 或 obj.parentNode 访问obj的父结点；在firefox下，使用 obj.parentNode 访问obj的父结点。
解决方法：因为firefox与IE都支持DOM，因此统一使用obj.parentNode 来访问obj的父结点。
17.cursor:hand VS cursor:pointer
　　问题说明：firefox不支持hand，但ie支持pointer ，两者都是手形指示。
　　解决方法：统一使用pointer。
18.innerText的问题.
       问题说明：innerText在IE中能正常工作，但是innerText在FireFox中却不行。
       解决方法：在非IE浏览器中使用textContent代替innerText。
       示例：
　　if(navigator.appName.indexOf("Explorer") >-1){ 
　　document.getElementById('element').innerText = "my text"; 
　　} else{ 
　　document.getElementById('element').textContent = "my text"; 
　　} 
       [注] innerHTML 同时被ie、firefox等浏览器支持，其他的，如outerHTML等只被ie支持，最好不用。
19. 对象宽高赋值问题
　　问题说明：FireFox中类似 obj.style.height = imgObj.height 的语句无效。
       解决方法：统一使用 obj.style.height = imgObj.height + 'px';
20. Table操作问题
       问题说明：ie、firefox以及其它浏览器对于 table 标签的操作都各不相同，在ie中不允许对table和tr的innerHTML赋值，使用js增加一个tr时，使用appendChild方法也不管用。
　　解决方法：
　　//向table追加一个空行： 
　　var row = otable.insertRow(-1); 
　　var cell = document.createElement("td"); 
　　cell.innerHTML = ""; 
　　cell.className = "XXXX"; 
　　row.appendChild(cell); 
       [注] 由于俺很少使用JS直接操作表格，这个问题没有遇见过。建议使用JS框架集来操作table，如JQuery。
21. ul和ol列表缩进问题
　　消除ul、ol等列表的缩进时，样式应写成：list-style:none;margin:0px;padding:0px; 
　　其中margin属性对IE有效，padding属性对FireFox有效。← 此句表述有误，详细见↓
       [注] 这个问题尚未实际验证，待验证后再来修改。
       [注] 经验证，在IE中，设置margin:0px可以去除列表的上下左右缩进、空白以及列表编号或圆点，设置padding对样式没有影响；在Firefox中，设置margin:0px仅仅可以去除上下的空白，设置padding:0px后仅仅可以去掉左右缩进，还必须设置list-style:none才能去除列表编号或圆点。也就是说，在IE中仅仅设置margin:0px即可达到最终效果，而在Firefox中必须同时设置margin:0px、padding:0px以及list-style:none三项才能达到最终效果。
22. CSS透明问题
　　IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。 
　　FF：opacity:0.6。
       [注] 最好两个都写，并将opacity属性放在下面。
23. CSS圆角问题
　　IE：ie7以下版本不支持圆角。
　　FF： -moz-border-radius:4px，或者-moz-border-radius-topleft:4px;-moz-border- radius-topright:4px;-moz-border-radius-bottomleft:4px;-moz-border-radius- bottomright:4px;。
       [注] 圆角问题是CSS中的经典问题，建议使用JQuery框架集来设置圆角，让这些复杂的问题留给别人去想吧。
　　关于CSS中的问题实在太多了，甚至同样的CSS定义在不同的页面标准中的显示效果都是不一样的。一个合乎发展的建议是，页面采用标准DHTML标准编写，较少使用table，CSS定义尽量依照标准DOM，同时兼顾IE、Firefox、Opera等主流浏览器。BTW，很多情况下，FF和Opera的CSS解释标准更贴近CSS标准，也更具有规范性。 